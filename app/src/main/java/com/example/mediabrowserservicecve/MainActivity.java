package com.example.mediabrowserservicecve;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Intent;
import android.os.Bundle;
import android.os.RemoteException;
import android.support.v4.media.MediaBrowserCompat;
import android.support.v4.media.MediaMetadataCompat;
import android.support.v4.media.session.MediaControllerCompat;
import android.support.v4.media.session.PlaybackStateCompat;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.MediaController;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    final static private String tag = "MainActivity";
    private MediaBrowserCompat mMediaBrowser;
    private MediaControllerCompat mMediaControllerCompat;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button button1 =(Button) findViewById(R.id.button1);
        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Bundle b = MediaControllerCompat.getMediaController(MainActivity.this).getPlaybackState().getExtras();
                assert b != null;
                PendingIntent pi = b.getParcelable("android.media.extras.ERROR_RESOLUTION_ACTION_INTENT");
                Log.d(tag, "got pendingIntent");
            }
        });

        Button button2 =(Button) findViewById(R.id.button2);
        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                initMediaBrowser();
                Log.d(tag, "connected");
            }
        });

        Button button3 =(Button) findViewById(R.id.button3);
        button3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // MediaBrowser通过调用subscribe，会回调到MediaService的onLoadChildren
                mMediaBrowser.subscribe("Main", new MediaBrowserCompat.SubscriptionCallback() {
                    @Override
                    public void onChildrenLoaded(@NonNull String parentId, @NonNull List<MediaBrowserCompat.MediaItem> children) {
                        //children 为来自Service的列表数据
                        Log.d(tag, "onChildrenLoaded");
                    }
                });
            }
        });

        Button button4 =(Button) findViewById(R.id.button4);
        button4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mMediaBrowser.sendCustomAction("action", null, new MediaBrowserCompat.CustomActionCallback() {
                    @Override
                    public void onProgressUpdate(String action, Bundle extras, Bundle data) {
                        super.onProgressUpdate(action, extras, data);
                    }

                    @Override
                    public void onResult(String action, Bundle extras, Bundle resultData) {
                        super.onResult(action, extras, resultData);

                        Log.d(tag, resultData.toString());
                    }

                    @Override
                    public void onError(String action, Bundle extras, Bundle data) {
                        super.onError(action, extras, data);
                    }
                });
            }
        });

        Button button5 =(Button) findViewById(R.id.button5);
        button5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //获取播放状态
                int pbState = mMediaControllerCompat.getPlaybackState().getState();
                //根据播放状态进行播放控制
                if (pbState == PlaybackStateCompat.STATE_PLAYING) {
                    mMediaControllerCompat.getTransportControls().pause();
                } else {
                    // MediaControllerCompat.setMediaController后， 也可以使用这种方式
                    MediaControllerCompat.getMediaController(MainActivity.this).getTransportControls().play();
                }
            }
        });

        startService(new Intent(this, MediaPlaybackService.class));

    }

    private final MediaBrowserCompat.ConnectionCallback mConnectionCallbacks =
            new MediaBrowserCompat.ConnectionCallback() {

                @Override
                public void onConnected() {
                    //连接成功回调
                    Log.d(tag, "onConnected");
                    if(mMediaBrowser.isConnected()){
                        Log.d(tag, "mMediaBrowser Connected");
                        try {
                            mMediaControllerCompat = new MediaControllerCompat(MainActivity.this, mMediaBrowser.getSessionToken());
                            mMediaControllerCompat.registerCallback(controllerCallback);
                            Log.d(tag, "mMediaController Registered");
                            MediaControllerCompat.setMediaController(MainActivity.this ,mMediaControllerCompat);
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                }

                @Override
                public void onConnectionSuspended() {
                    //连接中断回调
                    Log.d(tag, "onConnectionSuspended");
                }

                @Override
                public void onConnectionFailed() {
                    //连接失败回调
                    Log.d(tag, "onConnectionFailed");
                }
            };

    MediaControllerCompat.Callback controllerCallback =

            new MediaControllerCompat.Callback() {
                public void onSessionDestroyed() {
                    //Session销毁
                }

                @Override
                public void onRepeatModeChanged(int repeatMode) {
                    //循环模式发生变化
                }

                @Override
                public void onShuffleModeChanged(int shuffleMode) {
                    //随机模式发生变化
                }

                @Override
                public void onMetadataChanged(MediaMetadataCompat metadata) {
                    //数据变化
                }

                @Override
                public void onPlaybackStateChanged(PlaybackStateCompat state) {
                    //播放状态变化
                }
            };

    private void initMediaBrowser() {

        //1.待连接的服务

        ComponentName componentName = new ComponentName(this.getPackageName(),MediaPlaybackService.class.getName());

        //2.创建MediaBrowser

        mMediaBrowser = new MediaBrowserCompat(this, componentName, mConnectionCallbacks, null);

        //3.建立连接

        mMediaBrowser.connect();

    }




}