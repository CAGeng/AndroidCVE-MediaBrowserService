package com.example.mediabrowserservicecve;

import android.app.Service;
import android.os.Bundle;
import android.os.ResultReceiver;
import android.support.v4.media.MediaBrowserCompat;
import android.support.v4.media.MediaMetadataCompat;
import android.support.v4.media.session.MediaControllerCompat;
import android.support.v4.media.session.MediaSessionCompat;
import android.support.v4.media.session.PlaybackStateCompat;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.media.MediaBrowserServiceCompat;

import java.security.cert.CertPathBuilder;
import java.util.ArrayList;
import java.util.List;

public class MediaPlaybackService extends MediaBrowserServiceCompat {

    final static private String tag = "MediaPlaybackService";
    public MediaSessionCompat mSession = null;

    @Override

    public void onCreate() {

        super.onCreate();
        Log.d(tag, "onCreate");

        // 1\. 初始化 MediaSession
        mSession = new MediaSessionCompat(this, "MusicService");

        // 2\. 设置 MedisSessionCallback
        MediaSessionCompat.Callback mSessionCallback = new MediaSessionCompat.Callback() {
            @Override
            public void onCommand(String command, Bundle extras, ResultReceiver cb) {
                super.onCommand(command, extras, cb);
                Log.d(tag, "onCommand  " + command);
            }

            @Override
            public void onPlay(){
                Log.d(tag, "onPlay");
            }

        };
        mSession.setCallback(mSessionCallback);

        // 3\. 开启 MediaButton 和 TransportControls 的支持
        mSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS |
                MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);

        // 4\. 初始化 PlaybackState
        PlaybackStateCompat.Builder mStateBuilder = new PlaybackStateCompat.Builder()
                .setActions(PlaybackStateCompat.ACTION_PLAY | PlaybackStateCompat.ACTION_PLAY_PAUSE);
        mSession.setPlaybackState(mStateBuilder.build());

        // 5\. 关联 SessionToken
        setSessionToken(mSession.getSessionToken());

    }


    @Nullable
    @Override
    public BrowserRoot onGetRoot(@NonNull String clientPackageName, int clientUid, @Nullable Bundle rootHints) {
        Bundle style = getDefaultStyle();
        return new BrowserRoot("__ROOT__", style);
    }

    @Override
    public void onLoadChildren(@NonNull String parentId, @NonNull Result<List<MediaBrowserCompat.MediaItem>> result) {
        List<MediaBrowserCompat.MediaItem> items = new ArrayList<>();
        Log.d(tag, "onLoadChildren");
        //根据MediaID做数据填充
        switch (parentId) {
            case "Main": Log.d(tag, "onLoadChildren Main");
            default: break;
        }
        result.sendResult(items);
    }

    @Override
    public void onCustomAction(@NonNull String action, Bundle extras, @NonNull Result<Bundle> result) {
        //分支判断
        if ("action".equals(action)) {
            Log.d(tag, "onCustomAction");
            Bundle bundle = new Bundle();
            ArrayList<String> list = new ArrayList<>();
            //填充数据
            bundle.putStringArrayList("List", list);
            result.sendResult(bundle);
        }
    }

    // copy from android
    // Media Framework Content Style constants
    private static final String CONTENT_STYLE_SUPPORTED =
            "android.media.browse.CONTENT_STYLE_SUPPORTED";
    public static final String CONTENT_STYLE_PLAYABLE_HINT =
            "android.media.browse.CONTENT_STYLE_PLAYABLE_HINT";
    public static final String CONTENT_STYLE_BROWSABLE_HINT =
            "android.media.browse.CONTENT_STYLE_BROWSABLE_HINT";
    public static final int CONTENT_STYLE_LIST_ITEM_HINT_VALUE = 1;
    public static final int CONTENT_STYLE_GRID_ITEM_HINT_VALUE = 2;
    private Bundle getDefaultStyle() {
        Bundle style = new Bundle();
        style.putBoolean(CONTENT_STYLE_SUPPORTED, true);
        style.putInt(CONTENT_STYLE_BROWSABLE_HINT, CONTENT_STYLE_GRID_ITEM_HINT_VALUE);
        style.putInt(CONTENT_STYLE_PLAYABLE_HINT, CONTENT_STYLE_LIST_ITEM_HINT_VALUE);
        return style;
    }
}
